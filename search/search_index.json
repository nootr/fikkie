{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fikkie Welcome to the fikkie documentation! Fikkie is a simple lightweight watchdog which monitors external services over SSH. Simply specify which commands should be run on which servers and what output is expected, and fikkie will let you know when something's wrong. For more information, check out the GitHub repository or the PyPi page .","title":"Home"},{"location":"#fikkie","text":"Welcome to the fikkie documentation! Fikkie is a simple lightweight watchdog which monitors external services over SSH. Simply specify which commands should be run on which servers and what output is expected, and fikkie will let you know when something's wrong. For more information, check out the GitHub repository or the PyPi page .","title":"Fikkie"},{"location":"api/","text":"API reference CLI flags fikkie init Set up the ~/.fikkie directory. fikkie run [-l/--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,FAILURE}] Start fikkie. fikkie start [-l/--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,FAILURE}] Start a fikkie daemon. fikkie stop Stop the fikkie daemon. fikkie status [-f/--format {YAML,JSON,JSON-PRETTY}] Get status from all servers. fikkie -h/--help Show the help/usage text. Environment variables FIKKIE_BASE_DIR (default: \"~/.fikkie\") Fikkie's working directory. FIKKIE_CONFIG (default: \"~/.fikkie/config.yaml\") The configuration file. FIKKIE_BROKER_DIR (default: \"~/.fikkie/broker\") Celery broker data directory. FIKKIE_DB_FILENAME (default: \"~/.fikkie/db.json\") The database file. FIKKIE_LOG_FILE (default: \"~/.fikkie/db.json\") The daemon log file. FIKKIE_PID_FILE (default: \"~/.fikkie/fikkie.pid\") The PID file. Configuration options Heartbeat heartbeat.enable (default: True) Heartbeat is enabled if True. heartbeat.timezone (default: \"UTC\") The schedule timezone. heartbeat.schedule.minute (default: 0) Minute on which the heartbeat is triggered. heartbeat.schedule.hour (default: 12) Hour on which the heartbeat is triggered. heartbeat.schedule.day_of_week (default: ' ')* Day(s) of the week (0 = Sunday, 6 = Saturday) on which the heartbeat is triggered. heartbeat.schedule.day_of_month (default: ' ')* Day(s) of the month (0-31) on which the heartbeat is triggered. Example: heartbeat: timezone: 'Europe/Amsterdam' schedule: hour: 13 minute: 37 SSH ssh.username (default: \"fikkie\") The SSH login username. Example: ssh: username: fikkie Servers servers.HOSTNAME.description A human-readable description of the check. servers.HOSTNAME.command The command to execute. servers.HOSTNAME.expected The expected stdout output. Example: servers: primary.foo.com: - description: 'MariaDB' command: 'sudo systemctl status mariadb | grep \"Active: active\" -c' expected: '1' - description: 'HTTP code foo.com' command: 'curl -s -o /dev/null -w \"%{http_code}\" foo.com' expected: '200' Notifiers notifiers A list of notifier objects. Parameters differ per notifier. Example: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234 Discord notifier [ type = discord ] notifiers.token The Discord bot token. [ type = discord ] notifiers.channel_id The Discord channel ID to post notifications to. Example: notifiers: - type: discord token: 'foobarbaz' channel_id: 1234 E-mail notifier [ type = email ] notifiers.recipient The e-mail address to send notifications to. [ type = email ] notifiers.email The e-mail address which fikkie uses to send. [ type = email ] notifiers.password The password needed to login to the SMTP server. [ type = email ] notifiers.smtp_server The SMTP server. [ type = email ] notifiers.smtp_port (default: 465) The port on which the SMTP server listens. Example: notifiers: - type: email recipient: 'foo@hotmail.com' email: 'foo@gmail.com' password: 'v3rys3cr3t' smtp_server: 'smtp.gmail.com' Slack notifier [ type = slack ] notifiers.token The Slack bot token. [ type = slack ] notifiers.channel_id The channel ID that fikkie sends its notifications to. Example: notifiers: - type: slack token: 'xoxb-foobarbaz' channel_id: 'C0*******' Telegram notifier [ type = telegram ] notifiers.token The Telegram bot token. [ type = telegram ] notifiers.chat_id The chat ID that fikkie sends its notifications to. Example: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API reference"},{"location":"api/#cli-flags","text":"fikkie init Set up the ~/.fikkie directory. fikkie run [-l/--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,FAILURE}] Start fikkie. fikkie start [-l/--loglevel {DEBUG,INFO,WARNING,ERROR,CRITICAL,FAILURE}] Start a fikkie daemon. fikkie stop Stop the fikkie daemon. fikkie status [-f/--format {YAML,JSON,JSON-PRETTY}] Get status from all servers. fikkie -h/--help Show the help/usage text.","title":"CLI flags"},{"location":"api/#environment-variables","text":"FIKKIE_BASE_DIR (default: \"~/.fikkie\") Fikkie's working directory. FIKKIE_CONFIG (default: \"~/.fikkie/config.yaml\") The configuration file. FIKKIE_BROKER_DIR (default: \"~/.fikkie/broker\") Celery broker data directory. FIKKIE_DB_FILENAME (default: \"~/.fikkie/db.json\") The database file. FIKKIE_LOG_FILE (default: \"~/.fikkie/db.json\") The daemon log file. FIKKIE_PID_FILE (default: \"~/.fikkie/fikkie.pid\") The PID file.","title":"Environment variables"},{"location":"api/#configuration-options","text":"","title":"Configuration options"},{"location":"api/#heartbeat","text":"heartbeat.enable (default: True) Heartbeat is enabled if True. heartbeat.timezone (default: \"UTC\") The schedule timezone. heartbeat.schedule.minute (default: 0) Minute on which the heartbeat is triggered. heartbeat.schedule.hour (default: 12) Hour on which the heartbeat is triggered. heartbeat.schedule.day_of_week (default: ' ')* Day(s) of the week (0 = Sunday, 6 = Saturday) on which the heartbeat is triggered. heartbeat.schedule.day_of_month (default: ' ')* Day(s) of the month (0-31) on which the heartbeat is triggered. Example: heartbeat: timezone: 'Europe/Amsterdam' schedule: hour: 13 minute: 37","title":"Heartbeat"},{"location":"api/#ssh","text":"ssh.username (default: \"fikkie\") The SSH login username. Example: ssh: username: fikkie","title":"SSH"},{"location":"api/#servers","text":"servers.HOSTNAME.description A human-readable description of the check. servers.HOSTNAME.command The command to execute. servers.HOSTNAME.expected The expected stdout output. Example: servers: primary.foo.com: - description: 'MariaDB' command: 'sudo systemctl status mariadb | grep \"Active: active\" -c' expected: '1' - description: 'HTTP code foo.com' command: 'curl -s -o /dev/null -w \"%{http_code}\" foo.com' expected: '200'","title":"Servers"},{"location":"api/#notifiers","text":"notifiers A list of notifier objects. Parameters differ per notifier. Example: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234","title":"Notifiers"},{"location":"api/#discord-notifier","text":"[ type = discord ] notifiers.token The Discord bot token. [ type = discord ] notifiers.channel_id The Discord channel ID to post notifications to. Example: notifiers: - type: discord token: 'foobarbaz' channel_id: 1234","title":"Discord notifier"},{"location":"api/#e-mail-notifier","text":"[ type = email ] notifiers.recipient The e-mail address to send notifications to. [ type = email ] notifiers.email The e-mail address which fikkie uses to send. [ type = email ] notifiers.password The password needed to login to the SMTP server. [ type = email ] notifiers.smtp_server The SMTP server. [ type = email ] notifiers.smtp_port (default: 465) The port on which the SMTP server listens. Example: notifiers: - type: email recipient: 'foo@hotmail.com' email: 'foo@gmail.com' password: 'v3rys3cr3t' smtp_server: 'smtp.gmail.com'","title":"E-mail notifier"},{"location":"api/#slack-notifier","text":"[ type = slack ] notifiers.token The Slack bot token. [ type = slack ] notifiers.channel_id The channel ID that fikkie sends its notifications to. Example: notifiers: - type: slack token: 'xoxb-foobarbaz' channel_id: 'C0*******'","title":"Slack notifier"},{"location":"api/#telegram-notifier","text":"[ type = telegram ] notifiers.token The Telegram bot token. [ type = telegram ] notifiers.chat_id The chat ID that fikkie sends its notifications to. Example: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234","title":"Telegram notifier"},{"location":"configuration/","text":"Configuring fikkie Setting up SSH You probably already have set this up, so if you can SSH to the host(s) you want to monitor without using a password, you're fine. If not, please generate a key using ssh-keygen and copy the public key to ~/.ssh/authorized_keys on the target host(s). Adding user This step is optional. However, it might be a good idea to create a separate user for fikkie on the target host(s) with limited sudo permissions. Open the sudoers file with sudo visudo and add the following line: fikkie ALL=(ALL) NOPASSWD: /path/to/command1, /path/to/command2 Setting up fikkie When you run fikkie init , a configuration template is placed in ~/.fikkie/config.yaml . Edit this file to specify the servers you want to monitor and which notifiers should be used. Go to the API Reference for more info. To test the configuration, start fikkie by executing: fikkie run When everything works, you can start a fikkie daemon . Running fikkie as a daemon When you've configured fikkie and everything works as expected, start a fikkie daemon as follows: fikkie start Stopping the daemon is just as easy: fikkie stop The fikkie daemon saves its logs in ~/.fikkie/fikkie.log .","title":"Configuration"},{"location":"configuration/#configuring-fikkie","text":"","title":"Configuring fikkie"},{"location":"configuration/#setting-up-ssh","text":"You probably already have set this up, so if you can SSH to the host(s) you want to monitor without using a password, you're fine. If not, please generate a key using ssh-keygen and copy the public key to ~/.ssh/authorized_keys on the target host(s).","title":"Setting up SSH"},{"location":"configuration/#adding-user","text":"This step is optional. However, it might be a good idea to create a separate user for fikkie on the target host(s) with limited sudo permissions. Open the sudoers file with sudo visudo and add the following line: fikkie ALL=(ALL) NOPASSWD: /path/to/command1, /path/to/command2","title":"Adding user"},{"location":"configuration/#setting-up-fikkie","text":"When you run fikkie init , a configuration template is placed in ~/.fikkie/config.yaml . Edit this file to specify the servers you want to monitor and which notifiers should be used. Go to the API Reference for more info. To test the configuration, start fikkie by executing: fikkie run When everything works, you can start a fikkie daemon .","title":"Setting up fikkie"},{"location":"configuration/#running-fikkie-as-a-daemon","text":"When you've configured fikkie and everything works as expected, start a fikkie daemon as follows: fikkie start Stopping the daemon is just as easy: fikkie stop The fikkie daemon saves its logs in ~/.fikkie/fikkie.log .","title":"Running fikkie as a daemon"},{"location":"development/","text":"Developer's guide So you want to write a patch, fix a bug or implement a new feature? You're awesome, thanks! Setting up a development environment Start off by forking the fikkie GitHub repository and clone the fork. git clone https://github.com/YOUR_USERNAME/fikkie cd fikkie Now create a virtual environment to prevent a dependency hell on your system. python3 -m venv venv source venv/bin/activate Now that you're inside the virtual environment, install the dependencies: pip install -r requirements.txt pip install -r test-requirements.txt Finally, fikkie will need a configuration file to send notifications. Create a file at ~/.fikkie/config.yaml with the following contents: --- heartbeat: schedule: minute: '*' hour: '*' This will make sure fikkie sends a heartbeat notification every minute. The celery output will contain logs of the heartbeat notifications, but please check out Setting up a notifier to configure a notifier. Useful commands The project contains a Makefile to make your life a tiny bit easier. The most important make commands are the following three: make unit # Run the unit tests make lint # Run the linter (black) make dev # Run fikkie with loglevel set to DEBUG","title":"Development"},{"location":"development/#developers-guide","text":"So you want to write a patch, fix a bug or implement a new feature? You're awesome, thanks!","title":"Developer's guide"},{"location":"development/#setting-up-a-development-environment","text":"Start off by forking the fikkie GitHub repository and clone the fork. git clone https://github.com/YOUR_USERNAME/fikkie cd fikkie Now create a virtual environment to prevent a dependency hell on your system. python3 -m venv venv source venv/bin/activate Now that you're inside the virtual environment, install the dependencies: pip install -r requirements.txt pip install -r test-requirements.txt Finally, fikkie will need a configuration file to send notifications. Create a file at ~/.fikkie/config.yaml with the following contents: --- heartbeat: schedule: minute: '*' hour: '*' This will make sure fikkie sends a heartbeat notification every minute. The celery output will contain logs of the heartbeat notifications, but please check out Setting up a notifier to configure a notifier.","title":"Setting up a development environment"},{"location":"development/#useful-commands","text":"The project contains a Makefile to make your life a tiny bit easier. The most important make commands are the following three: make unit # Run the unit tests make lint # Run the linter (black) make dev # Run fikkie with loglevel set to DEBUG","title":"Useful commands"},{"location":"installation/","text":"Installation Installing fikkie is easy! pip install fikkie fikkie init Fikkie works with Python 3.7 or higher.","title":"Installation"},{"location":"installation/#installation","text":"Installing fikkie is easy! pip install fikkie fikkie init Fikkie works with Python 3.7 or higher.","title":"Installation"},{"location":"notifiers/","text":"Setting up a notifier Discord notifier Creating a Discord bot as a notifier is pretty straightforward: Log into the Discord Developer Portal and create a new Application. Navigate to the \"Bot\" settings and add a new bot. Copy the token. Disable the \"Public bot\" switch. Navigate to the \"OAuth2\" settings and click on \"URL generator\". Enable the \"Bot\" scope and \"Send messages\" permissions. Visit the generated URL. Select the server on which you want to add the bot. Now add the following lines to your fikkie configuration: notifiers: - type: discord token: 'foobarbaz' channel_id: 1234 The Discord notifier uses the hikari package as a dependency, so make sure you install that as well. E-mail notifier The e-mail notifier needs to login on an SMTP server. In this example, GMail's SMTP server is used to mail to a hotmail recipient. notifiers: - type: email recipient: 'foo@hotmail.com' email: 'foo@gmail.com' password: 'abcdefghijkl' smtp_server: 'smtp.gmail.com' smtp_port: 465 # This is the default port, you can remove this line Note that for this to work with GMail, you would first need to create an App Password. Slack notifier Create a Slack bot by following these steps: Visit the Slack Apps page . Create a new App and select the \"From scratch\" option. Name the App and pick the workspace in which the bot must send notifications. Go to \"OAuth & Permissions\". Scroll down to the \"Scopes\" section and add a chat:write OAuth Scope for bots. Now scroll up and click on \"Install to Workspace\". After allowing the permissions, copy the token under \"Bot User OAuth Token\". Finally, return to Slack, select the newly added App and click on the name of the Bot. Click on \"Add this Bot to a channel\" to, well, add it to a channel! Now add the following lines to your fikkie configuration: notifiers: - type: slack token: 'xoxb-foobarbaz' channel_id: 'C0******' The Slack notifier uses the slack_sdk package as a dependency, so make sure you install that as well. Telegram notifier Talk to @BotFather to create a bot and add the following lines to your fikkie configuration: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234 The Telegram notifier uses the python-telegram-bot package as a dependency, so make sure you install that as well.","title":"Notifiers"},{"location":"notifiers/#setting-up-a-notifier","text":"","title":"Setting up a notifier"},{"location":"notifiers/#discord-notifier","text":"Creating a Discord bot as a notifier is pretty straightforward: Log into the Discord Developer Portal and create a new Application. Navigate to the \"Bot\" settings and add a new bot. Copy the token. Disable the \"Public bot\" switch. Navigate to the \"OAuth2\" settings and click on \"URL generator\". Enable the \"Bot\" scope and \"Send messages\" permissions. Visit the generated URL. Select the server on which you want to add the bot. Now add the following lines to your fikkie configuration: notifiers: - type: discord token: 'foobarbaz' channel_id: 1234 The Discord notifier uses the hikari package as a dependency, so make sure you install that as well.","title":"Discord notifier"},{"location":"notifiers/#e-mail-notifier","text":"The e-mail notifier needs to login on an SMTP server. In this example, GMail's SMTP server is used to mail to a hotmail recipient. notifiers: - type: email recipient: 'foo@hotmail.com' email: 'foo@gmail.com' password: 'abcdefghijkl' smtp_server: 'smtp.gmail.com' smtp_port: 465 # This is the default port, you can remove this line Note that for this to work with GMail, you would first need to create an App Password.","title":"E-mail notifier"},{"location":"notifiers/#slack-notifier","text":"Create a Slack bot by following these steps: Visit the Slack Apps page . Create a new App and select the \"From scratch\" option. Name the App and pick the workspace in which the bot must send notifications. Go to \"OAuth & Permissions\". Scroll down to the \"Scopes\" section and add a chat:write OAuth Scope for bots. Now scroll up and click on \"Install to Workspace\". After allowing the permissions, copy the token under \"Bot User OAuth Token\". Finally, return to Slack, select the newly added App and click on the name of the Bot. Click on \"Add this Bot to a channel\" to, well, add it to a channel! Now add the following lines to your fikkie configuration: notifiers: - type: slack token: 'xoxb-foobarbaz' channel_id: 'C0******' The Slack notifier uses the slack_sdk package as a dependency, so make sure you install that as well.","title":"Slack notifier"},{"location":"notifiers/#telegram-notifier","text":"Talk to @BotFather to create a bot and add the following lines to your fikkie configuration: notifiers: - type: telegram token: '1234:abcd' chat_id: 1234 The Telegram notifier uses the python-telegram-bot package as a dependency, so make sure you install that as well.","title":"Telegram notifier"}]}